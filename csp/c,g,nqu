1) CRYPT - CSP, cpp

#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>

template<typename V, typename D>
class Constraint {
public:
    std::vector<V> variables;

    virtual bool satisfied(std::unordered_map<V, D>& assignment) = 0;
};

template<typename V, typename D>
class CSP {
public:
    std::vector<V> variables;
    std::unordered_map<V, std::vector<D>> domains;
    std::unordered_map<V, std::vector<Constraint<V, D>*>> constraints;

    void add_constraint(Constraint<V, D>* constraint) {
        for (V variable : constraint->variables) {
            if (domains.find(variable) == domains.end()) {
                throw std::invalid_argument("Variable in constraint not in CSP");
            }
            constraints[variable].push_back(constraint);
        }
    }

    bool consistent(V variable, std::unordered_map<V, D>& assignment) {
        for (Constraint<V, D>* constraint : constraints[variable]) {
            if (!constraint->satisfied(assignment)) {
                return false;
            }
        }
        return true;
    }

    std::unordered_map<V, D> backtracking_search(std::unordered_map<V, D>& assignment) {
        if (assignment.size() == variables.size()) {
            return assignment;
        }

        V unassigned_variable;
        for (V variable : variables) {
            if (assignment.find(variable) == assignment.end()) {
                unassigned_variable = variable;
                break;
            }
        }

        for (D value : domains[unassigned_variable]) {
            std::unordered_map<V, D> local_assignment = assignment;
            local_assignment[unassigned_variable] = value;
            if (consistent(unassigned_variable, local_assignment)) {
                std::unordered_map<V, D> result = backtracking_search(local_assignment);
                if (!result.empty()) {
                    return result;
                }
            }
        }

        return std::unordered_map<V, D>();
    }
};

class SendMoreMoneyConstraint : public Constraint<char, int> {
public:
    SendMoreMoneyConstraint(std::vector<char>& letters) {
        variables = letters;
    }

    bool satisfied(std::unordered_map<char, int>& assignment) override {
        std::unordered_set<int> unique_values;
        for (auto& pair : assignment) {
            if (unique_values.find(pair.second) != unique_values.end()) {
                return false;
            }
            unique_values.insert(pair.second);
        }

        if (assignment.size() == variables.size()) {
            int s = assignment['S'];
            int e = assignment['E'];
            int n = assignment['N'];
            int d = assignment['D'];
            int m = assignment['M'];
            int o = assignment['O'];
            int r = assignment['R'];
            int y = assignment['Y'];
            int send = s * 1000 + e * 100 + n * 10 + d;
            int more = m * 1000 + o * 100 + r * 10 + e;
            int money = m * 10000 + o * 1000 + n * 100 + e * 10 + y;
            return send + more == money;
        }

        return true;
    }
};

int main() {
    std::cout << "Cryptarithmetic problem: " << std::endl;
    std::cout << "   SEND" << std::endl;
    std::cout << " + MORE" << std::endl;
    std::cout << "-------" << std::endl;
    std::cout << " MONEY" << std::endl;
    std::vector<char> letters = {'S', 'E', 'N', 'D', 'M', 'O', 'R', 'Y'};
    std::unordered_map<char, std::vector<int>> possible_digits;
    for (char letter : letters) {
        possible_digits[letter] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    }
    possible_digits['M'] = {1}; 
    CSP<char, int> csp;
    csp.variables = letters;
    csp.domains = possible_digits;
    csp.add_constraint(new SendMoreMoneyConstraint(letters));

    std::unordered_map<char, int> assignment;
    assignment = csp.backtracking_search(assignment);

    if (assignment.empty()) {
        std::cout << "No solution found!" << std::endl;
    } else {
        std::cout << "Here are the results:" << std::endl;
        for (auto& pair : assignment) {
            std::cout << pair.first << ": " << pair.second << std::endl;
        }
    }

    return 0;
}
-------------------------------------------------------------------------------------
2) graph coloring


import java.util.Scanner;
 
public class GraphColoring
{    
    private int V, numOfColors;
    private int[] color; 
    private int[][] graph;

    public void graphColor(int[][] g, int noc)
    {
        V = g.length;
        numOfColors = noc;
        color = new int[V];
        graph = g;
 
        try
        {
            solve(0);
            System.out.println("No solution");
        }
        catch (Exception e)
        {
            System.out.println("\nSolution exists ");
            display();
        }
    }

    public void solve(int v) throws Exception
    {
        if (v == V)
            throw new Exception("Solution found");
        for (int c = 1; c <= numOfColors; c++)
        {
            if (isPossible(v, c))
            {
                color[v] = c;
                solve(v + 1);
                color[v] = 0;
            }
        }    
    }
    public boolean isPossible(int v, int c)
    {
        for (int i = 0; i < V; i++)
            if (graph[v][i] == 1 && c == color[i])
                return false;
        return true;
    }
    public void display()
    {
        System.out.print("\nColors : ");
        for (int i = 0; i < V; i++)
            System.out.print(color[i] +" ");
        System.out.println();
    }    
    public static void main (String[] args) 
    {
        Scanner scan = new Scanner(System.in);
        System.out.println("Graph Coloring Algorithm Test\n");
        GraphColoring gc = new GraphColoring();
 
        System.out.println("Enter number of vertices\n");
        int V = scan.nextInt();
 
        System.out.println("\nEnter matrix\n");
        int[][] graph = new int[V][V];
        for (int i = 0; i < V; i++)
            for (int j = 0; j < V; j++)
                graph[i][j] = scan.nextInt();
 
        System.out.println("\nEnter number of colors");
        int c = scan.nextInt();
 
        gc.graphColor(graph, c);
    }
}
------------------------------------------------------------------------------------
3) nqueen cpp

#include <iostream>
#include <vector>

using namespace std;

const int N = 7;

bool Solve(vector<int> &board, int col);
bool PlaceQueen(vector<int> &board, int row, int col);
bool IsSafe(const vector<int> &board, int row, int col);
void PrintBoard(const vector<int> &board);

int main() {
    vector<int> board(N, -1); 
    bool foundSolution = Solve(board, 0);
    
    if (foundSolution) {
        cout << "Solution found:" << endl;
        PrintBoard(board);
    } else {
        cout << "No solution found." << endl;
    }
    
    return 0;
}

bool Solve(vector<int> &board, int col) {
    if (col >= N) return true; 
    
    for (int rowToTry = 0; rowToTry < N; rowToTry++) {
        if (PlaceQueen(board, rowToTry, col)) {
            cout << "Placing queen at (" << rowToTry << "," << col << ")" << endl;
            PrintBoard(board);
            if (Solve(board, col + 1)) return true; 
            board[col] = -1; 
            cout << "Backtracking..." << endl;
            PrintBoard(board);
        }
    }
    return false; 
}

bool PlaceQueen(vector<int> &board, int row, int col) {
    if (IsSafe(board, row, col)) {
        board[col] = row; 
        return true;
    }
    return false;
}

bool IsSafe(const vector<int> &board, int row, int col) {
    for (int prevCol = 0; prevCol < col; prevCol++) {
        int prevRow = board[prevCol];
        if (prevRow == row || abs(prevRow - row) == abs(prevCol - col)) {
            return false;
        }
    }
    return true;
}

void PrintBoard(const vector<int> &board) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            if (board[col] == row) {
                cout << "Q ";
            } else {
                cout << ". ";
            }
        }
        cout << endl;
    }
    cout << endl;
}
------------------------------------------------------------------------------------

4) sudoku

// package ArtificalIntelligence;

import java.util.*;
import java.util.stream.IntStream;
public class SudokoCsp
{
    private static int BOARD_SIZE = 9;
    private static int SUBSECTION_SIZE = 3;
    private static int NO_VALUE = 0;
    private static int CONSTRAINTS = 4;
    private static int MIN_VALUE = 1;
    private static int MAX_VALUE = 9;
    private static int BOARD_START_INDEX = 0;
    private static boolean solve(int[][] board) {
        for (int row = BOARD_START_INDEX; row < BOARD_SIZE; row++) {
            for (int column = BOARD_START_INDEX; column < BOARD_SIZE; column++) {
                if (board[row][column] == NO_VALUE) {
                    for (int k = MIN_VALUE; k <= MAX_VALUE; k++) {
                        board[row][column] = k;
                        if (isValid(board, row, column) && solve(board)) {
                            return true;
                        }
                        board[row][column] = NO_VALUE;
                    }
                    return false;
                }
            }
        }
        return true;
    }
    private static boolean isValid(int[][] board, int row, int column) {
        return (rowConstraint(board, row)
          && columnConstraint(board, column) 
          && subsectionConstraint(board, row, column));
    }
    
    private static boolean rowConstraint(int[][] board, int row) {
        boolean[] constraint = new boolean[BOARD_SIZE];
        return IntStream.range(BOARD_START_INDEX, BOARD_SIZE)
          .allMatch(column -> checkConstraint(board, row, constraint, column));
    }
    
    private static boolean columnConstraint(int[][] board, int column) {
        boolean[] constraint = new boolean[BOARD_SIZE];
        return IntStream.range(BOARD_START_INDEX, BOARD_SIZE)
          .allMatch(row -> checkConstraint(board, row, constraint, column));
    }
    
    private static boolean subsectionConstraint(int[][] board, int row, int column) {
        boolean[] constraint = new boolean[BOARD_SIZE];
        int subsectionRowStart = (row / SUBSECTION_SIZE) * SUBSECTION_SIZE;
        int subsectionRowEnd = subsectionRowStart + SUBSECTION_SIZE;
    
        int subsectionColumnStart = (column / SUBSECTION_SIZE) * SUBSECTION_SIZE;
        int subsectionColumnEnd = subsectionColumnStart + SUBSECTION_SIZE;
    
        for (int r = subsectionRowStart; r < subsectionRowEnd; r++) {
            for (int c = subsectionColumnStart; c < subsectionColumnEnd; c++) {
                if (!checkConstraint(board, r, constraint, c)) return false;
            }
        }
        return true;
    }
    private static boolean  checkConstraint(
      int[][] board, 
      int row, 
      boolean[] constraint, 
      int column) {
        if (board[row][column] != NO_VALUE) {
            if (!constraint[board[row][column] - 1]) {
                constraint[board[row][column] - 1] = true;
            } else {
                return false;
            }
        }
        return true;
    }
    
    private static void printBoard( int[][] board) {
        for (int row = BOARD_START_INDEX; row < BOARD_SIZE; row++) {
            for (int column = BOARD_START_INDEX; column < BOARD_SIZE; column++) {
                System.out.print(board[row][column] + " ");
            }
            System.out.println();
        }
    }

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
//		int[][] board=new int[9][9];
//		System.err.println("If the Block is empty enter the value as 0");
//		for(int i=0;i<9;i++) {
//			for(int j=0;j<9;j++) {
//				System.out.print("Enter the value present at Index ["+(i+1)+","+(j+1)+"] ");
//				board[i][j]=sc.nextInt();
//				
//			}
//		}
//	    int[][] board = {
//          { 9, 0, 0, 0, 1, 0, 0, 0, 0 },
//          { 8, 0, 3, 0, 0, 0, 0, 0, 5 },
//          { 0, 0, 0, 9, 0, 0, 0, 6, 0 },
//          { 0, 4, 0, 3, 0, 0, 1, 0, 0 },
//          { 0, 8, 0, 0, 0, 0, 0, 0, 9 },
//          { 1, 0, 7, 0, 0, 0, 5, 4, 0 },
//          { 2, 0, 0, 0, 3, 0, 4, 0, 0 },
//          { 3, 6, 0, 0, 0, 0, 0, 0, 2 },
//          { 4, 0, 0, 0, 0, 5, 0, 3, 0 }};
          
           int [][] board= {
           { 8, 0, 0, 0, 0, 0, 0, 0, 0 },
           { 0, 0, 3, 6, 0, 0, 0, 0, 0 },
           { 0, 7, 0, 0, 9, 0, 2, 0, 0 },
           { 0, 5, 0, 0, 0, 7, 0, 0, 0 },
           { 0, 0, 0, 0, 4, 5, 7, 0, 0 },
           { 0, 0, 0, 1, 0, 0, 0, 3, 0 },
           { 0, 0, 1, 0, 0, 0, 0, 6, 8 },
           { 0, 0, 8, 5, 0, 0, 0, 1, 0 },
           { 0, 9, 0, 0, 0, 0, 4, 0, 0 }};
//        };
	    System.out.println("The given Sudoko is :");
	    System.out.println();
	    printBoard(board);
	    System.out.println();
	    System.out.println("Solving Using Backtracking CSP ");
	    System.out.println();
        solve(board);
        printBoard(board);
        
        
        
	}
}

1) TICTACTOE NON-AI

import java.util.Scanner;
import java.util.Random;

public class TicTacToe {
    private char[][] board;
    private char currentPlayer;
    private static final char PLAYER_X = 'X';
    private static final char PLAYER_O = 'O';
    private static final char EMPTY = ' ';
    private static final int BOARD_SIZE = 3;
    private static final int MAX_MOVES = 9;

    private Random random;

    public TicTacToe() {
        board = new char[BOARD_SIZE][BOARD_SIZE];
        currentPlayer = PLAYER_X;
        random = new Random();
        initializeBoard();
    }

    private void initializeBoard() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                board[i][j] = EMPTY;
            }
        }
    }

    public void printBoard() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                System.out.print(board[i][j] + " | ");
            }
            System.out.println();
        }
    }

    public boolean makeMove(int row, int col) {
        if (row < 0 || row >= BOARD_SIZE || col < 0 || col >= BOARD_SIZE || board[row][col] != EMPTY) {
            return false;
        }
        board[row][col] = currentPlayer;
        return true;
    }

    public boolean isBoardFull() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                if (board[i][j] == EMPTY) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean hasPlayerWon(char player) {
        // Check rows and columns
        for (int i = 0; i < BOARD_SIZE; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
                return true; // Row
            }
            if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
                return true; // Column
            }
        }

        // Check diagonals
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
            return true; // Diagonal
        }
        if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
            return true; // Diagonal
        }

        return false;
    }

    public void switchPlayer() {
        currentPlayer = (currentPlayer == PLAYER_X) ? PLAYER_O : PLAYER_X;
    }

    public void play() {
        Scanner scanner = new Scanner(System.in);
        int row, col;

        while (true) {
            printBoard();
            System.out.println("Player " + currentPlayer + "'s turn:");
            if (currentPlayer == PLAYER_X) {
                System.out.print("Enter row and column (0-2): ");
                row = scanner.nextInt();
                col = scanner.nextInt();
                if (!makeMove(row, col)) {
                    System.out.println("Invalid move! Try again.");
                    continue;
                }
            } else { // Computer's turn
                if (!makeComputerMove()) {
                    System.out.println("It's a draw!");
                    break;
                }
            }

            if (hasPlayerWon(currentPlayer)) {
                printBoard();
                System.out.println("Player " + currentPlayer + " wins!");
                break;
            }

            if (isBoardFull()) {
                printBoard();
                System.out.println("It's a draw!");
                break;
            }

            switchPlayer();
        }
        scanner.close();
    }

    public boolean makeComputerMove() {
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = PLAYER_O;
                    if (hasPlayerWon(PLAYER_O)) {
                        System.out.println("Computer placed " + PLAYER_O + " at " + i + ", " + j);
                        return true;
                    } else {
                        board[i][j] = EMPTY;
                    }
                }
            }
        }

        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = PLAYER_X;
                    if (hasPlayerWon(PLAYER_X)) {
                        board[i][j] = PLAYER_O;
                        System.out.println("Computer placed " + PLAYER_O + " at " + i + ", " + j);
                        return true;
                    } else {
                        board[i][j] = EMPTY;
                    }
                }
            }
        }

        // Otherwise, make a random move
        for (int i = 0; i < 5; i++) {
            int row = random.nextInt(BOARD_SIZE);
            int col = random.nextInt(BOARD_SIZE);
            if (board[row][col] == EMPTY) {
                board[row][col] = PLAYER_O;
                System.out.println("Computer placed " + PLAYER_O + " at " + row + ", " + col);
                return true;
            }
        }
        return false; // Board is full, no moves possible
    }

    public static void main(String[] args) {
        TicTacToe game = new TicTacToe();
        game.play();
    }
}

------------------------------------------------------------------------------
2) TICTACTOE AI MINIMAX

import java.util.Scanner;

public class TicTacToeMinimax {
    private static final char PLAYER_X = 'X';
    private static final char PLAYER_O = 'O';
    private static final char EMPTY = ' ';

    public static void main(String[] args) {
        char[][] board = {
                {EMPTY, EMPTY, EMPTY},
                {EMPTY, EMPTY, EMPTY},
                {EMPTY, EMPTY, EMPTY}
        };

        printBoard(board);
        playGame(board);
    }

    public static void playGame(char[][] board) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            // Human player's move
            makeMove(board, PLAYER_X);
            printBoard(board);

            // Check if human player wins
            if (isWinning(board, PLAYER_X)) {
                System.out.println("Human player wins!");
                break;
            }

            // Check if the game is a draw
            if (isBoardFull(board)) {
                System.out.println("It's a draw!");
                break;
            }

            // Computer player's move
            System.out.println("Computer's turn:");
            int[] bestMove = getBestMove(board, PLAYER_O);
            board[bestMove[0]][bestMove[1]] = PLAYER_O;
            printBoard(board);

            // Check if computer player wins
            if (isWinning(board, PLAYER_O)) {
                System.out.println("Computer wins!");
                break;
            }

            // Check if the game is a draw
            if (isBoardFull(board)) {
                System.out.println("It's a draw!");
                break;
            }
        }
        scanner.close();
    }

    public static void makeMove(char[][] board, char player) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.print("Enter row and column (0-2) for player " + player + ": ");
            int row = scanner.nextInt();
            int col = scanner.nextInt();

            if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == EMPTY) {
                board[row][col] = player;
                break;
            } else {
                System.out.println("Invalid move! Try again.");
            }
        }
    }

    public static boolean isWinning(char[][] board, char player) {
        // Check rows and columns
        for (int i = 0; i < 3; i++) {
            if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
                return true; // Row
            }
            if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
                return true; // Column
            }
        }

        // Check diagonals
        if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
            return true; // Diagonal
        }
        if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
            return true; // Diagonal
        }

        return false;
    }

    public static boolean isBoardFull(char[][] board) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == EMPTY) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void printBoard(char[][] board) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                System.out.print(board[i][j] + " | ");
            }
            System.out.println();
        }
        System.out.println("----------");
    }

    public static int[] getBestMove(char[][] board, char player) {
        int[] bestMove = new int[]{-1, -1};
        int bestScore = Integer.MIN_VALUE;

        // Try all empty positions
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = player;
                    int score = minimax(board, 0, false);
                    board[i][j] = EMPTY;

                    if (score > bestScore) {
                        bestScore = score;
                        bestMove[0] = i;
                        bestMove[1] = j;
                    }
                }
            }
        }
        return bestMove;
    }

    public static int minimax(char[][] board, int depth, boolean isMaximizing) {
        if (isWinning(board, PLAYER_X)) {
            return -10;
        } else if (isWinning(board, PLAYER_O)) {
            return 10;
        } else if (isBoardFull(board)) {
            return 0;
        }

        if (isMaximizing) {
            int bestScore = Integer.MIN_VALUE;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] == EMPTY) {
                        board[i][j] = PLAYER_O;
                        bestScore = Math.max(bestScore, minimax(board, depth + 1, false));
                        board[i][j] = EMPTY;
                    }
                }
            }
            return bestScore;
        } else {
            int bestScore = Integer.MAX_VALUE;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (board[i][j] == EMPTY) {
                        board[i][j] = PLAYER_X;
                        bestScore = Math.min(bestScore, minimax(board, depth + 1, true));
                        board[i][j] = EMPTY;
                    }
                }
            }
            return bestScore;
        }
    }
}
-------------------------------------------------------------------------------------
3) TICTACTOE ALPHA

import java.util.*;

public class Main {
    static int[][] board = {
        {0, 0, 0},
        {0, 0, 0},
        {0, 0, 0}
    };

    public static void main(String[] args) {
        System.out.println("=================================================");
        System.out.println("TIC-TAC-TOE using MINIMAX with ALPHA-BETA Pruning");
        System.out.println("=================================================");
        pvc();
    }

    public static void Gameboard(int[][] board) {
        char[] chars = { 'X', ' ', 'O' }; // Mapping: 0 -> ' ', 1 -> 'X', -1 -> 'O'
        for (int[] row : board) {
            for (int cell : row) {
                System.out.print("| " + chars[cell + 1] + " |"); // cell + 1 for correct indexing
            }
            System.out.println("\n---------------");
        }
        System.out.println("===============");
    }

    public static void Clearboard(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            Arrays.fill(board[i], 0);
        }
    }

    public static boolean winningPlayer(int[][] board, int player) {
        int[][] conditions = {
            {board[0][0], board[0][1], board[0][2]},
            {board[1][0], board[1][1], board[1][2]},
            {board[2][0], board[2][1], board[2][2]},
            {board[0][0], board[1][0], board[2][0]},
            {board[0][1], board[1][1], board[2][1]},
            {board[0][2], board[1][2], board[2][2]},
            {board[0][0], board[1][1], board[2][2]},
            {board[0][2], board[1][1], board[2][0]}
        };

        for (int[] condition : conditions) {
            if (condition[0] == player && condition[1] == player && condition[2] == player) {
                return true;
            }
        }
        return false;
    }

    public static boolean gameWon(int[][] board) {
        return winningPlayer(board, 1) || winningPlayer(board, -1);
    }

    public static void printResult(int[][] board) {
        if (winningPlayer(board, 1)) {
            System.out.println("X has won!\n");
        } else if (winningPlayer(board, -1)) {
            System.out.println("O's have won!\n");
        } else {
            System.out.println("Draw\n");
        }
    }

    public static List<int[]> blanks(int[][] board) {
        List<int[]> blank = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == 0) {
                    blank.add(new int[]{i, j});
                }
            }
        }
        return blank;
    }

    public static boolean boardFull(int[][] board) {
        return blanks(board).isEmpty();
    }

    public static void setMove(int[][] board, int x, int y, int player) {
        board[x][y] = player;
    }

    public static void playerMove(int[][] board) {
        Scanner scanner = new Scanner(System.in);
        boolean e = true;
        Map<Integer, int[]> moves = new HashMap<>();
        moves.put(1, new int[]{0, 0});
        moves.put(2, new int[]{0, 1});
        moves.put(3, new int[]{0, 2});
        moves.put(4, new int[]{1, 0});
        moves.put(5, new int[]{1, 1});
        moves.put(6, new int[]{1, 2});
        moves.put(7, new int[]{2, 0});
        moves.put(8, new int[]{2, 1});
        moves.put(9, new int[]{2, 2});
        
        while (e) {
            try {
                System.out.print("Enter a number between 1-9: ");
                int move = scanner.nextInt();
                if (move < 1 || move > 9) {
                    System.out.println("Invalid Move! Try again!");
                } else {
                    int[] cell = moves.get(move);
                    if (board[cell[0]][cell[1]] != 0) {
                        System.out.println("Invalid Move! Try again!");
                    } else {
                        setMove(board, cell[0], cell[1], 1);
                        Gameboard(board);
                        e = false;
                    }
                }
            } catch (InputMismatchException ex) {
                System.out.println("Enter a number!");
                scanner.next(); // clear the invalid input
            }
        }
    }

    public static int getScore(int[][] board) {
        if (winningPlayer(board, 1)) {
            return 10;
        } else if (winningPlayer(board, -1)) {
            return -10;
        } else {
            return 0;
        }
    }

    public static int[] abminimax(int[][] board, int depth, int alpha, int beta, int player) {
        int row = -1;
        int col = -1;
        if (depth == 0 || gameWon(board)) {
            return new int[]{row, col, getScore(board)};
        } else {
            for (int[] cell : blanks(board)) {
                setMove(board, cell[0], cell[1], player);
                int[] score = abminimax(board, depth - 1, alpha, beta, -player);
                if (player == 1) {
                    if (score[2] > alpha) {
                        alpha = score[2];
                        row = cell[0];
                        col = cell[1];
                    }
                } else {
                    if (score[2] < beta) {
                        beta = score[2];
                        row = cell[0];
                        col = cell[1];
                    }
                }
                setMove(board, cell[0], cell[1], 0);
                if (alpha >= beta) {
                    break;
                }
            }
            return new int[]{row, col, player == 1 ? alpha : beta};
        }
    }

    public static void o_comp(int[][] board) {
        Random rand = new Random();
        if (blanks(board).size() == 9) {
            int x = rand.nextInt(3);
            int y = rand.nextInt(3);
            setMove(board, x, y, -1);
            Gameboard(board);
        } else {
            int[] result = abminimax(board, blanks(board).size(), Integer.MIN_VALUE, Integer.MAX_VALUE, -1);
            setMove(board, result[0], result[1], -1);
            Gameboard(board);
        }
    }

    public static void x_comp(int[][] board) {
        Random rand = new Random();
        if (blanks(board).size() == 9) {
            int x = rand.nextInt(3);
            int y = rand.nextInt(3);
            setMove(board, x, y, 1);
            Gameboard(board);
        } else {
            int[] result = abminimax(board, blanks(board).size(), Integer.MIN_VALUE, Integer.MAX_VALUE, 1);
            setMove(board, result[0], result[1], 1);
            Gameboard(board);
        }
    }

    public static void makeMove(int[][] board, int player, int mode) {
        if (mode == 1) {
            if (player == 1) {
                playerMove(board);
            } else {
                o_comp(board);
            }
        } else {
            if (player == 1) {
                o_comp(board);
            } else {
                x_comp(board);
            }
        }
    }

    public static void pvc() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            try {
                System.out.print("Enter to play 1st or 2nd: ");
                int order = scanner.nextInt();
                if (order != 1 && order != 2) {
                    System.out.println("Please pick 1 or 2");
                } else {
                    Clearboard(board);
                    int currentPlayer = order == 2 ? -1 : 1;
                    while (!boardFull(board) && !gameWon(board)) {
                        makeMove(board, currentPlayer, 1);
                        currentPlayer *= -1;
                    }
                    printResult(board);
                    break;
                }
            } catch (InputMismatchException ex) {
                System.out.println("Enter a number!");
                scanner.next(); // clear the invalid input
            }
        }
    }
}
-------------------------------------------------------------------------------------
